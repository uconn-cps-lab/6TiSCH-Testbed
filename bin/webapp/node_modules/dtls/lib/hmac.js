var dtls_config               = require('dtls/dtls_config.js');
var memset                    = require('dtls/dtls_config').memset;
var memcpy                    = require('dtls/dtls_config').memcpy;
var dtls_int_to_uint8         = require('dtls/dtls_config').dtls_int_to_uint8;
var dtls_int_to_uint16        = require('dtls/dtls_config').dtls_int_to_uint16;
var dtls_int_to_uint24        = require('dtls/dtls_config').dtls_int_to_uint24;
var dtls_int_to_uint32        = require('dtls/dtls_config').dtls_int_to_uint32;
var dtls_int_to_uint48        = require('dtls/dtls_config').dtls_int_to_uint48;
var dtls_uint8_to_int         = require('dtls/dtls_config').dtls_uint8_to_int;
var dtls_uint16_to_int        = require('dtls/dtls_config').dtls_uint16_to_int;
var dtls_uint24_to_int        = require('dtls/dtls_config').dtls_uint24_to_int;
var dtls_uint32_to_int        = require('dtls/dtls_config').dtls_uint32_to_int;
var dtls_info                 = require('dtls/dtls_config').dtls_info;
var dtls_warn                 = require('dtls/dtls_config').dtls_warn;
var SHA256_Update             = require('dtls/lib/sha2').SHA256_Update;
var SHA256_Init               = require('dtls/lib/sha2').SHA256_Init;
var SHA256_Final              = require('dtls/lib/sha2').SHA256_Final;

function dtls_hash_init(ctx) 
{
  SHA256_Init(ctx);
}

function dtls_hash_update(ctx, input) 
{
  SHA256_Update(ctx, input);
}

function dtls_hmac_init(ctx, key)
{
   var i;
   
   memset(ctx.pad, 0, dtls_config.DTLS_HMAC_BLOCKSIZE);
   memset(ctx.data.state, 0, 8);
   memset(ctx.data.buffer, 0, dtls_config.SHA256_BLOCK_LENGTH);

   if (key.length > dtls_config.DTLS_HMAC_BLOCKSIZE) 
   {
      dtls_hash_init(ctx.data);
      dtls_hash_update(ctx.data, key);
      dtls_hash_finalize(ctx.pad, ctx.data);
   } 
   else
   {
      memcpy(ctx.pad, key, key.length);
   }

   //* create ipad: 
   for (i = 0; i < dtls_config.DTLS_HMAC_BLOCKSIZE; ++i)
   {
      ctx.pad[i] ^= 0x36;
   }

   dtls_hash_init(ctx.data);
   dtls_hmac_update(ctx, ctx.pad);

   //* create opad by xor-ing pad[i] with 0x36 ^ 0x5C: 
   for (i = 0; i < dtls_config.DTLS_HMAC_BLOCKSIZE; ++i)
   {
      ctx.pad[i] ^= 0x6A;
   }
     
   return ctx;
}

function dtls_hmac_update(ctx, input)
{
    dtls_hash_update(ctx.data, input);
}

function dtls_hash_finalize(buf, ctx) 
{
  SHA256_Final(buf, ctx);
  return dtls_config.SHA256_DIGEST_LENGTH;
}

function dtls_hmac_new(key)
{
   var ctx = {pad: [], data: {state: [], bitcount: 0, buffer: []}};
   dtls_hmac_init(ctx, key);
   return ctx;
}

function dtls_hmac_finalize(ctx, result)
{
   var buf = [];
      
   dtls_hash_finalize(buf, ctx.data);

   dtls_hash_init(ctx.data);
   dtls_hash_update(ctx.data, ctx.pad);
   dtls_hash_update(ctx.data, buf);
   var len = dtls_hash_finalize(result, ctx.data);

   return len;
}

module.exports.dtls_hmac_init = dtls_hmac_init;
module.exports.dtls_hmac_new = dtls_hmac_new;
module.exports.dtls_hmac_update = dtls_hmac_update;
module.exports.dtls_hmac_finalize = dtls_hmac_finalize;
 //DTLS_ECC_FEATURE begin
module.exports.dtls_hash_init = dtls_hash_init;
module.exports.dtls_hash_update = dtls_hash_update;
module.exports.dtls_hash_finalize = dtls_hash_finalize;
 //DTLS_ECC_FEATURE end 