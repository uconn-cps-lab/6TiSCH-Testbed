/* sysbios */
var useSysbiosInRom = true;

if ( useSysbiosInRom )
{
  var ROM = xdc.useModule('ti.sysbios.rom.ROM');
  ROM.romName = ROM.CC2650;
}

var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Types = xdc.useModule('xdc.runtime.Types');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysCallback = xdc.useModule('xdc.runtime.SysCallback');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');
if ( useSysbiosInRom )
{
  var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
}
else
{
  var HeapMin = xdc.useModule('xdc.runtime.HeapMin');
}

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Task = xdc.useModule('ti.sysbios.knl.Task');

var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var M3Hwi = xdc.useModule('ti.sysbios.family.arm.m3.Hwi');

var Timestamp = xdc.useModule('xdc.runtime.Timestamp');
var Mailbox = xdc.useModule('ti.sysbios.knl.Mailbox');
var Timer = xdc.useModule('ti.sysbios.family.arm.cc26xx.Timer');

var driversConfig = xdc.useModule('ti.drivers.Config');
driversConfig.libType = driversConfig.LibType_Instrumented;

/* Enable idle task (default). */
Task.enableIdleTask = true;
//Task.idleTaskSize = 1024;

/* compile out all Assert's */
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;

/* Don't load string names of modules on the target */
Defaults.common$.namedModule = false;

/* Allow Mod_create() and Mod_construct() but not delete() or destruct() */
Defaults.common$.memoryPolicy = Types.CREATE_POLICY;

/* Don't load diagnostic/descriptive text strings on the target */
Text.isLoaded = false;

/* Use the minimal user-supplied callback provider */
System.SupportProxy = SysCallback;
/* no exit handlers needed */
System.maxAtexitHandlers = 0;

/* main() and Hwi, Swi stack size */
Program.stack = 0x500;

if ( useSysbiosInRom )
{
  /* no command-line arguments main(argc, argv) needed */
  Program.argSize = 0;
}

/* build a custom, optimized version of SYS/BIOS */
BIOS.libType = BIOS.LibType_Custom;

/* no logging - all compiled out */
BIOS.logsEnabled = false;

/* disable Asserts in SYS/BIOS code */
BIOS.assertsEnabled = false;

/* Reduce number of Task priority levels to save RAM */
Task.numPriorities = 6;

/* Set the default Task stack size - used if one is not specified */
Task.defaultStackSize = 256;

/* Don't check stacks for overflow - saves cycles (and power) and Flash */
Task.checkStackFlag = false;

/* Disable exception handling to save Flash - undo during active development */
M3Hwi.enableException = true;
M3Hwi.excHandlerFunc = "&exceptionHandler"; /* null = default while loop function. Use e.g. "&myFxn" to use your own function. */
M3Hwi.nvicCCR.UNALIGN_TRP = 0;
M3Hwi.nvicCCR.DIV_0_TRP = 0;

/* Don't check for interrupt stack overflow during Idle loop */
Hwi.checkStackFlag = true;//false;

/* Minimize Flash and RAM usage of Error module */
Error.raiseHook = null; /* null = default while loop function. Use e.g. "&myFxn" to your own handler function. */
Error.maxDepth = 2;

/* Set the default CPU frequency */
BIOS.cpuFreq.lo = 48000000;

/* Put reset vector at start of Flash */
M3Hwi.resetVectorAddress  = 0x0;

/* Put interrupt vector at start of RAM so interrupts can be configured at runtime */
M3Hwi.vectorTableAddress  = 0x20000000;

/* CC2650 has 50 interrupts */
M3Hwi.NUM_INTERRUPTS = 50;

if ( useSysbiosInRom )
{
  /* Create a small "alloc-only" heap */
  BIOS.heapSize = 0x400;
}
else
{
  var heapMinParams = new HeapMin.Params;
  heapMinParams.size = 0x400;
  var myHeapMin = HeapMin.create(heapMinParams);
  Memory.defaultHeapInstance = myHeapMin;
}

var Swi = xdc.useModule('ti.sysbios.knl.Swi');
Swi.numPriorities = 6;
BIOS.swiEnabled = true;

BIOS.includeXdcRuntime = true;

/* Tasks cannot pend based on priority */
Semaphore.supportsPriority = false;

/* Change default error function -- just spin */
Error.policyFxn = Error.policySpin;

/* true:  Allow runtime creation of e.g. semaphores
 * false: Compile out reference to Memory in BIOS */
BIOS.runtimeCreatesEnabled = true;

/* Abort and exit functions -- just spin */
System.abortFxn = System.abortSpin;
System.exitFxn = System.exitSpin;

/* CC26xx Boot module */
var Boot = xdc.useModule('ti.sysbios.family.arm.cc26xx.Boot');
Boot.driverlibVersion = 2;
Boot.customerConfig = false;

/* Clock tick Period set to 10 us if not defined */
Clock.tickPeriod = 10;

var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
Program.global.timeslot_sem = Semaphore.create(0);
//Program.global.slip_poll_sem = Semaphore.create(0);

var clock1Params = new Clock.Params();
clock1Params.instance.name = "assoc_req_ctimer";
Program.global.assoc_req_ctimer = Clock.create("&mlme_assoc_req_timeout_cb", null, clock1Params);

var clock3Params = new Clock.Params();
clock3Params.instance.name = "scan_ct";
Program.global.scan_ct = Clock.create("&scan_timer_cb", null, clock3Params);

var clock4Params = new Clock.Params();
clock4Params.instance.name = "ka_ctimer";
Program.global.ka_ctimer = Clock.create("&TSCH_TXM_send_keepalive_pkt", null, clock4Params);

var clock5Params = new Clock.Params();
clock5Params.instance.name = "scan_sleep_ctimer";
Program.global.scan_sleep_ctimer = Clock.create("&start_scan", null, clock5Params);

var mailbox0Params = new Mailbox.Params();
mailbox0Params.instance.name = "nhl_tsch_mailbox";
Program.global.nhl_tsch_mailbox = Mailbox.create(4, 4, mailbox0Params);  //The size (4 bytes) must agreen with the C data structure definition

var mailbox1Params = new Mailbox.Params();
mailbox1Params.instance.name = "tcpip_mailbox";
Program.global.tcpip_mailbox = Mailbox.create(8, 10, mailbox1Params); //The size (8 bytes) must agreen with the C data structure definition


var task0Params = new Task.Params();
task0Params.instance.name = "tcpip_task_handle";
task0Params.stackSize = 1152;
task0Params.priority = 3;
Program.global.tcpip_task_handle = Task.create("&tcpip_task", task0Params);

var task1Params = new Task.Params();
task1Params.instance.name = "nhl_tsch_handle";
task1Params.stackSize = 768;
task1Params.priority = 4;
Program.global.nhl_tsch_handle = Task.create("&nhl_tsch_task", task1Params);


var task4Params = new Task.Params();
task4Params.instance.name = "timeslot_task_handle";
task4Params.stackSize = 896; 
task4Params.priority = 5;
Program.global.timeslot_task_handle = Task.create("&timeslot_task", task4Params);

var clock2Params = new Clock.Params();
clock2Params.instance.name = "astat_req_ctimer";
Program.global.astat_req_ctimer = Clock.create("&astat_req_proc", null, clock2Params);


Timer.funcHookCH1 = "&rtimer_isr";

/*
  ===================================
  coap task
  ===================================
*/
var coapTaskParams = new Task.Params();
coapTaskParams.instance.name = "coap_handle";
coapTaskParams.stackSize = 768;  
coapTaskParams.priority = 2;
Program.global.coap_handle = Task.create("&coap_task", coapTaskParams);

/*
  ====================================
  coap mailbox for coap task
  ====================================
*/
var mailboxCoapParams = new Mailbox.Params();
mailboxCoapParams.instance.name = "coap_mailbox";
Program.global.coap_mailbox = Mailbox.create(8, 16, mailboxCoapParams); //The size (8 bytes) must agreen with the C data structure definition



// ACM event mailbox
var mailboxAcmEvtParams = new Mailbox.Params();
mailboxAcmEvtParams.instance.name = "acm_evt_mbox";
// message size is 1, total 8 msg
Program.global.acm_evt_mbox = Mailbox.create(1, 8, mailboxAcmEvtParams); //The size (1 byte) must agreen with the C data structure definition



/*
  ===================================
  harp packets task
  ===================================
*/
var harpTaskParams = new Task.Params();
harpTaskParams.instance.name = "harp_handle";
harpTaskParams.stackSize = 768;  
harpTaskParams.priority = 1;
Program.global.harp_handle = Task.create("&harp_task", harpTaskParams);

/*
  ====================================
  harp mailbox for harp task
  ====================================
*/
var mailboxHARPParams = new Mailbox.Params();
mailboxHARPParams.instance.name = "harp_mailbox";
Program.global.harp_mailbox = Mailbox.create(1, 8, mailboxHARPParams); //The size (8 bytes) must agreen with the C data structure definition



